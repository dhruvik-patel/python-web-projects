---------------------------------------------------------------------------------------------------------
# polls/views.py : webpage in django
# A URLconf maps URL patterns to views.

def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)

def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    output = ', '.join([q.question_text for q in latest_question_list])
    return HttpResponse(output)
---------------------------------------------------------------------------------------------------------
# polls/urls.py
from django.urls import path
from . import views

urlpatterns = [
    # ex: /polls/
    path('', views.index, name='index'),
    # ex: /polls/5/
    path('<int:question_id>/', views.detail, name='detail'),
    # ex: /polls/5/results/
    path('<int:question_id>/results/', views.results, name='results'),
    # ex: /polls/5/vote/
    path('<int:question_id>/vote/', views.vote, name='vote'),
]

---------------------------------------------------------------------------------------------------------
# Each view is responsible for doing one of two things: returning an HttpResponse object containing the content
# for the requested page, or raising an exception such as Http404. The rest is up to you.
# Your view can read records from a database, or not. It can use a template system such as Django’s – or a third-# party Python template system – or not. It can generate a PDF file, output XML, create a ZIP file on the fly, # anything you want, using whatever Python libraries you want. All Django wants is that HttpResponse. Or an # exception.

---------------------------------------------------------------------------------------------------------
# let’s use Django’s template system to separate the design from Python by creating a template that the view can use.
# Within the templates directory you have just created, create another directory called polls, and within that create # a file called index.html. In other words, your template should be at polls/templates/polls/index.html. Because of # how the app_directories template loader works as described above, you can refer to this template within Django as # polls/index.html.



---------------------------------------------------------------------------------------------------------
# polls/templates/polls/index.html
{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

---------------------------------------------------------------------------------------------------------
# polls/views.py
from django.shortcuts import render
from .models import Question

def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)

---------------------------------------------------------------------------------------------------------

