########### TIME SERIES FORECASTING ##############

train_orgnl.info()

# TO CONVERT TO DATETIME
train_orgnl['time'] = pd.to_datetime(train_orgnl.time)
test['time'] = pd.to_datetime(test.time)

test.info()

print(train_orgnl['time'].min())
print(train_orgnl['time'].max())

train = train_orgnl.copy()

# Lets set time feature as index which helps us in analyzing trend of the data
train_orgnl.set_index('time', inplace=True)
train_orgnl.drop('id', axis=1, inplace=True)

train_orgnl['feature_1'].plot(kind='line',color='red', figsize=(20,10))

train_orgnl['feature_2'].plot(kind='line',color='red', figsize=(20,10))



# Also we can see that feature_1 and feature_2 are negatively correlated.
# Noticeable trends and changing levels can be also be seen in feature_1 and feature_2

print('Number of missing values in feature_1 of Training Data: ' ,train['feature_1'].isnull().sum())
print('Number of missing values in feature_2 of Training Data: ' ,train['feature_2'].isnull().sum())
print('Number of missing values in feature_1 of Test Data: ' ,test['feature_1'].isnull().sum())

train1 = train[:int(0.9*len(train))]
valid = train[int(0.9*len(train)):]

print(train1.shape)
print(valid.shape)

# CHECK VARMAX
mdl = VARMAX(train_orgnl)
mdl_fit = mdl.fit()
prdn = mdl_fit.forecast(steps=len(valid))
prdn.head(10)

valid.shape

from sklearn.metrics import mean_squared_error as ms
from sklearn.metrics import mean_absolute_error as ma
valid.set_index('time', inplace=True)
valid.drop('id',axis=1, inplace=True)

prdn.head()

import math
rmse=math.sqrt(ms(prdn,valid))
print('Mean absolute error is: '+ str(ma(prdn,valid)))
print('Root Mean Squared error is: ' + str(rmse))


# Now we could maybe apply fbprobhet model
fbp_data = pd.DataFrame(columns=['ds', 'y', 'add1'])
fbp_data['ds'] = train['time']
fbp_data['y'] = train['feature_2']
fbp_data['add1'] = train['feature_1']

# Splitting the data into train and validation data (90:10)
size = int(fbp_data.shape[0]*0.9)
x_train = fbp_data[:size]
x_valid = fbp_data[size:]

